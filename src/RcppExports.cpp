// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/netcopula.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// qnorm_boost
Rcpp::NumericVector qnorm_boost(const Rcpp::NumericVector& p, const double& mean, const double& sd, const bool& lower_tail);
RcppExport SEXP netcopula_qnorm_boost(SEXP pSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(qnorm_boost(p, mean, sd, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// pnorm_boost
Rcpp::NumericVector pnorm_boost(const Rcpp::NumericVector& x, const double& mean, const double& sd, const bool& lower_tail);
RcppExport SEXP netcopula_pnorm_boost(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(pnorm_boost(x, mean, sd, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// qbinom_boost
Rcpp::NumericVector qbinom_boost(const Rcpp::NumericVector& p, const int& n, const double& prob, const bool& lower_tail);
RcppExport SEXP netcopula_qbinom_boost(SEXP pSEXP, SEXP nSEXP, SEXP probSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(qbinom_boost(p, n, prob, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// pbinom_boost
Rcpp::NumericVector pbinom_boost(const Rcpp::NumericVector& x, const int& n, const double& prob, const bool& lower_tail);
RcppExport SEXP netcopula_pbinom_boost(SEXP xSEXP, SEXP nSEXP, SEXP probSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(pbinom_boost(x, n, prob, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// dmvn_arma
arma::vec dmvn_arma(const arma::mat& x, const arma::vec& mean, const arma::mat& sigma, const bool& logd);
RcppExport SEXP netcopula_dmvn_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvn_arma(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// rmvn_arma
arma::mat rmvn_arma(const int& n, const arma::vec& mean, const arma::mat& sigma);
RcppExport SEXP netcopula_rmvn_arma(SEXP nSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvn_arma(n, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// dinvwish_arma
double dinvwish_arma(const arma::mat& IW, const int& nu, const arma::mat& S, const bool& logd);
RcppExport SEXP netcopula_dinvwish_arma(SEXP IWSEXP, SEXP nuSEXP, SEXP SSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type IW(IWSEXP);
    Rcpp::traits::input_parameter< const int& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dinvwish_arma(IW, nu, S, logd));
    return rcpp_result_gen;
END_RCPP
}
// rinvwish_arma
arma::mat rinvwish_arma(const int& nu, const arma::mat& S);
RcppExport SEXP netcopula_rinvwish_arma(SEXP nuSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvwish_arma(nu, S));
    return rcpp_result_gen;
END_RCPP
}
// dlkj_arma
double dlkj_arma(const arma::mat& R, const double& eta, const bool& logd);
RcppExport SEXP netcopula_dlkj_arma(SEXP RSEXP, SEXP etaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dlkj_arma(R, eta, logd));
    return rcpp_result_gen;
END_RCPP
}
// rlkj_arma
arma::mat rlkj_arma(const int& K, const double& eta);
RcppExport SEXP netcopula_rlkj_arma(SEXP KSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(rlkj_arma(K, eta));
    return rcpp_result_gen;
END_RCPP
}
// rtruncnorm_rcpp
Rcpp::NumericVector rtruncnorm_rcpp(const int& n, const double& a, const double& b, const double& mean, const double& sd);
RcppExport SEXP netcopula_rtruncnorm_rcpp(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncnorm_rcpp(n, a, b, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// rtruncnorm2_rcpp
Rcpp::NumericVector rtruncnorm2_rcpp(const int& n, const double& a, const double& b, const double& mean, const double& sd);
RcppExport SEXP netcopula_rtruncnorm2_rcpp(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncnorm2_rcpp(n, a, b, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// dtruncnorm_rcpp
Rcpp::NumericVector dtruncnorm_rcpp(const Rcpp::NumericVector& x, const double& a, const double& b, const double& mean, const double& sd);
RcppExport SEXP netcopula_dtruncnorm_rcpp(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(dtruncnorm_rcpp(x, a, b, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// dlogchol_arma
double dlogchol_arma(const arma::mat& A, const double& sigma_r, const bool& logd);
RcppExport SEXP netcopula_dlogchol_arma(SEXP ASEXP, SEXP sigma_rSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_r(sigma_rSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dlogchol_arma(A, sigma_r, logd));
    return rcpp_result_gen;
END_RCPP
}
// rlogchol_arma
arma::mat rlogchol_arma(const int& M, const double& sigma_r);
RcppExport SEXP netcopula_rlogchol_arma(SEXP MSEXP, SEXP sigma_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_r(sigma_rSEXP);
    rcpp_result_gen = Rcpp::wrap(rlogchol_arma(M, sigma_r));
    return rcpp_result_gen;
END_RCPP
}
// dmvt_arma
Rcpp::NumericVector dmvt_arma(const arma::mat& x, const arma::vec& mean, const arma::mat& sigma, const int& df, const bool& logd);
RcppExport SEXP netcopula_dmvt_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP dfSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvt_arma(x, mean, sigma, df, logd));
    return rcpp_result_gen;
END_RCPP
}
// rmvt_arma
arma::mat rmvt_arma(const int& n, const arma::vec& mean, const arma::mat& sigma, const int& df);
RcppExport SEXP netcopula_rmvt_arma(SEXP nSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvt_arma(n, mean, sigma, df));
    return rcpp_result_gen;
END_RCPP
}
// dmatvn_arma
double dmatvn_arma(const arma::mat& X, const arma::mat& M, const arma::mat& U, const arma::mat& V, const bool& logd);
RcppExport SEXP netcopula_dmatvn_arma(SEXP XSEXP, SEXP MSEXP, SEXP USEXP, SEXP VSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmatvn_arma(X, M, U, V, logd));
    return rcpp_result_gen;
END_RCPP
}
// rmatvn_arma
arma::mat rmatvn_arma(const arma::mat& M, const arma::mat& U, const arma::mat& V);
RcppExport SEXP netcopula_rmatvn_arma(SEXP MSEXP, SEXP USEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(rmatvn_arma(M, U, V));
    return rcpp_result_gen;
END_RCPP
}
// dmatvt_arma
double dmatvt_arma(const arma::mat& X, const arma::mat& M, const arma::mat& Sigma, const arma::mat& Omega, const int& df, const bool& logd);
RcppExport SEXP netcopula_dmatvt_arma(SEXP XSEXP, SEXP MSEXP, SEXP SigmaSEXP, SEXP OmegaSEXP, SEXP dfSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const int& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmatvt_arma(X, M, Sigma, Omega, df, logd));
    return rcpp_result_gen;
END_RCPP
}
// rmatvt_arma
arma::mat rmatvt_arma(const arma::mat& M, const arma::mat& Sigma, const arma::mat& Omega, const int& df);
RcppExport SEXP netcopula_rmatvt_arma(SEXP MSEXP, SEXP SigmaSEXP, SEXP OmegaSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const int& >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(rmatvt_arma(M, Sigma, Omega, df));
    return rcpp_result_gen;
END_RCPP
}
// dinvgamma_rcpp
arma::vec dinvgamma_rcpp(const arma::vec& x, const double& alpha, const double& beta, const bool& logd);
RcppExport SEXP netcopula_dinvgamma_rcpp(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dinvgamma_rcpp(x, alpha, beta, logd));
    return rcpp_result_gen;
END_RCPP
}
// rinvgamma_rcpp
arma::vec rinvgamma_rcpp(const int& n, const double& alpha, const double& beta);
RcppExport SEXP netcopula_rinvgamma_rcpp(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvgamma_rcpp(n, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// gausscopdens
double gausscopdens(const Rcpp::NumericVector& u, const arma::mat& Gamma, const bool& is_u, const bool& logd);
RcppExport SEXP netcopula_gausscopdens(SEXP uSEXP, SEXP GammaSEXP, SEXP is_uSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type is_u(is_uSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(gausscopdens(u, Gamma, is_u, logd));
    return rcpp_result_gen;
END_RCPP
}
// nc_loglik
double nc_loglik(const Rcpp::NumericMatrix& y, const Rcpp::NumericMatrix& n, const Rcpp::NumericMatrix& x, const Rcpp::IntegerVector& trt, const Rcpp::NumericMatrix& mu, const Rcpp::NumericMatrix& delta, const Rcpp::List& Gamma);
RcppExport SEXP netcopula_nc_loglik(SEXP ySEXP, SEXP nSEXP, SEXP xSEXP, SEXP trtSEXP, SEXP muSEXP, SEXP deltaSEXP, SEXP GammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type trt(trtSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Gamma(GammaSEXP);
    rcpp_result_gen = Rcpp::wrap(nc_loglik(y, n, x, trt, mu, delta, Gamma));
    return rcpp_result_gen;
END_RCPP
}
// indic_a_b
int indic_a_b(const double& y_ikm, const int& n_ikm, const double& x_ikm, const double& mu_ikm, const double& delta_ikm);
RcppExport SEXP netcopula_indic_a_b(SEXP y_ikmSEXP, SEXP n_ikmSEXP, SEXP x_ikmSEXP, SEXP mu_ikmSEXP, SEXP delta_ikmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type y_ikm(y_ikmSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_ikm(n_ikmSEXP);
    Rcpp::traits::input_parameter< const double& >::type x_ikm(x_ikmSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu_ikm(mu_ikmSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_ikm(delta_ikmSEXP);
    rcpp_result_gen = Rcpp::wrap(indic_a_b(y_ikm, n_ikm, x_ikm, mu_ikm, delta_ikm));
    return rcpp_result_gen;
END_RCPP
}
// nc_logprior
double nc_logprior(const Rcpp::NumericMatrix& mu, const double& mu_sigma, const arma::mat& d, const double& d_sigma, const arma::mat& Sigma_M, const double& sigma_r, const int& ref_trt);
RcppExport SEXP netcopula_nc_logprior(SEXP muSEXP, SEXP mu_sigmaSEXP, SEXP dSEXP, SEXP d_sigmaSEXP, SEXP Sigma_MSEXP, SEXP sigma_rSEXP, SEXP ref_trtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu_sigma(mu_sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type d_sigma(d_sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_M(Sigma_MSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_r(sigma_rSEXP);
    Rcpp::traits::input_parameter< const int& >::type ref_trt(ref_trtSEXP);
    rcpp_result_gen = Rcpp::wrap(nc_logprior(mu, mu_sigma, d, d_sigma, Sigma_M, sigma_r, ref_trt));
    return rcpp_result_gen;
END_RCPP
}
// x_imputed
Rcpp::NumericMatrix x_imputed(const Rcpp::NumericMatrix& x, const Rcpp::List& Gamma, const Rcpp::IntegerVector& trt);
RcppExport SEXP netcopula_x_imputed(SEXP xSEXP, SEXP GammaSEXP, SEXP trtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type trt(trtSEXP);
    rcpp_result_gen = Rcpp::wrap(x_imputed(x, Gamma, trt));
    return rcpp_result_gen;
END_RCPP
}
// n_imputed
Rcpp::NumericMatrix n_imputed(const Rcpp::NumericMatrix& n_data);
RcppExport SEXP netcopula_n_imputed(SEXP n_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type n_data(n_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(n_imputed(n_data));
    return rcpp_result_gen;
END_RCPP
}
// y_imputed
Rcpp::NumericMatrix y_imputed(const Rcpp::NumericMatrix& y, const Rcpp::NumericMatrix& x_imp, const Rcpp::IntegerVector& narms, const Rcpp::NumericMatrix& mu, const Rcpp::NumericMatrix& delta, const Rcpp::NumericMatrix& n_imp);
RcppExport SEXP netcopula_y_imputed(SEXP ySEXP, SEXP x_impSEXP, SEXP narmsSEXP, SEXP muSEXP, SEXP deltaSEXP, SEXP n_impSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x_imp(x_impSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type narms(narmsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type n_imp(n_impSEXP);
    rcpp_result_gen = Rcpp::wrap(y_imputed(y, x_imp, narms, mu, delta, n_imp));
    return rcpp_result_gen;
END_RCPP
}
// Gamma_logpost
double Gamma_logpost(const arma::mat& Gamma, const arma::mat& x, const double& eta);
RcppExport SEXP netcopula_Gamma_logpost(SEXP GammaSEXP, SEXP xSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(Gamma_logpost(Gamma, x, eta));
    return rcpp_result_gen;
END_RCPP
}
// logpost
double logpost(const double& mu, const double& delta, const double& y, const double& n, const double& w, const double& gamma, const double& eps, const double& eps_ab);
RcppExport SEXP netcopula_logpost(SEXP muSEXP, SEXP deltaSEXP, SEXP ySEXP, SEXP nSEXP, SEXP wSEXP, SEXP gammaSEXP, SEXP epsSEXP, SEXP eps_abSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_ab(eps_abSEXP);
    rcpp_result_gen = Rcpp::wrap(logpost(mu, delta, y, n, w, gamma, eps, eps_ab));
    return rcpp_result_gen;
END_RCPP
}
// mu_logpost
double mu_logpost(const double& mu, const double& delta, const double& y, const double& n, const double& w, const double& gamma, const double& mu_sigma, const double& eps, const double& eps_ab);
RcppExport SEXP netcopula_mu_logpost(SEXP muSEXP, SEXP deltaSEXP, SEXP ySEXP, SEXP nSEXP, SEXP wSEXP, SEXP gammaSEXP, SEXP mu_sigmaSEXP, SEXP epsSEXP, SEXP eps_abSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu_sigma(mu_sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_ab(eps_abSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_logpost(mu, delta, y, n, w, gamma, mu_sigma, eps, eps_ab));
    return rcpp_result_gen;
END_RCPP
}
// delta_logpost
double delta_logpost(const double& delta, const double& mu, const double& tau, const double& eta, const double& y, const double& n, const double& w, const double& gamma, const double& eps, const double& eps_ab);
RcppExport SEXP netcopula_delta_logpost(SEXP deltaSEXP, SEXP muSEXP, SEXP tauSEXP, SEXP etaSEXP, SEXP ySEXP, SEXP nSEXP, SEXP wSEXP, SEXP gammaSEXP, SEXP epsSEXP, SEXP eps_abSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_ab(eps_abSEXP);
    rcpp_result_gen = Rcpp::wrap(delta_logpost(delta, mu, tau, eta, y, n, w, gamma, eps, eps_ab));
    return rcpp_result_gen;
END_RCPP
}
// delta_logprior
double delta_logprior(const arma::mat& delta, const arma::mat& d, const arma::mat& Sigma_M, const Rcpp::IntegerVector& trt_arms, const Rcpp::IntegerVector& baseline, const Rcpp::IntegerVector& narms);
RcppExport SEXP netcopula_delta_logprior(SEXP deltaSEXP, SEXP dSEXP, SEXP Sigma_MSEXP, SEXP trt_armsSEXP, SEXP baselineSEXP, SEXP narmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_M(Sigma_MSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type trt_arms(trt_armsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type baseline(baselineSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type narms(narmsSEXP);
    rcpp_result_gen = Rcpp::wrap(delta_logprior(delta, d, Sigma_M, trt_arms, baseline, narms));
    return rcpp_result_gen;
END_RCPP
}
// d_logprior
double d_logprior(const arma::mat& d, const double& d_sigma, const int& ref_trt);
RcppExport SEXP netcopula_d_logprior(SEXP dSEXP, SEXP d_sigmaSEXP, SEXP ref_trtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type d_sigma(d_sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type ref_trt(ref_trtSEXP);
    rcpp_result_gen = Rcpp::wrap(d_logprior(d, d_sigma, ref_trt));
    return rcpp_result_gen;
END_RCPP
}
// d_logpost_multi
double d_logpost_multi(const arma::mat& d, const arma::mat& delta, const arma::mat& Sigma_M, const Rcpp::IntegerVector& trt_arms, const Rcpp::IntegerVector& baseline, const Rcpp::IntegerVector& narms, const double& d_sigma, const int& ref_trt);
RcppExport SEXP netcopula_d_logpost_multi(SEXP dSEXP, SEXP deltaSEXP, SEXP Sigma_MSEXP, SEXP trt_armsSEXP, SEXP baselineSEXP, SEXP narmsSEXP, SEXP d_sigmaSEXP, SEXP ref_trtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_M(Sigma_MSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type trt_arms(trt_armsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type baseline(baselineSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type narms(narmsSEXP);
    Rcpp::traits::input_parameter< const double& >::type d_sigma(d_sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type ref_trt(ref_trtSEXP);
    rcpp_result_gen = Rcpp::wrap(d_logpost_multi(d, delta, Sigma_M, trt_arms, baseline, narms, d_sigma, ref_trt));
    return rcpp_result_gen;
END_RCPP
}
// d_logpost
double d_logpost(const arma::mat& d, const arma::mat& delta, const arma::mat& Sigma_M, const Rcpp::IntegerVector& trt, const Rcpp::IntegerVector& baseline, const Rcpp::IntegerVector& narms_study, const double& d_sigma, const int& ref_trt);
RcppExport SEXP netcopula_d_logpost(SEXP dSEXP, SEXP deltaSEXP, SEXP Sigma_MSEXP, SEXP trtSEXP, SEXP baselineSEXP, SEXP narms_studySEXP, SEXP d_sigmaSEXP, SEXP ref_trtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_M(Sigma_MSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type trt(trtSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type baseline(baselineSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type narms_study(narms_studySEXP);
    Rcpp::traits::input_parameter< const double& >::type d_sigma(d_sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type ref_trt(ref_trtSEXP);
    rcpp_result_gen = Rcpp::wrap(d_logpost(d, delta, Sigma_M, trt, baseline, narms_study, d_sigma, ref_trt));
    return rcpp_result_gen;
END_RCPP
}
// Sigma_M_logpost
double Sigma_M_logpost(const arma::mat& d, const arma::mat& delta, const arma::mat& Sigma_M, const Rcpp::IntegerVector& trt, const Rcpp::IntegerVector& baseline, const Rcpp::IntegerVector& narms_study, const double& sigma_r);
RcppExport SEXP netcopula_Sigma_M_logpost(SEXP dSEXP, SEXP deltaSEXP, SEXP Sigma_MSEXP, SEXP trtSEXP, SEXP baselineSEXP, SEXP narms_studySEXP, SEXP sigma_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_M(Sigma_MSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type trt(trtSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type baseline(baselineSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type narms_study(narms_studySEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_r(sigma_rSEXP);
    rcpp_result_gen = Rcpp::wrap(Sigma_M_logpost(d, delta, Sigma_M, trt, baseline, narms_study, sigma_r));
    return rcpp_result_gen;
END_RCPP
}
// nc_mcmc_opt
Rcpp::List nc_mcmc_opt(const Rcpp::RObject& data, const Rcpp::List& init, const int& totiter, const Rcpp::List& prior, const Rcpp::List& prop, const Rcpp::List& tuning, const Rcpp::List& adapt, const bool& verbose);
RcppExport SEXP netcopula_nc_mcmc_opt(SEXP dataSEXP, SEXP initSEXP, SEXP totiterSEXP, SEXP priorSEXP, SEXP propSEXP, SEXP tuningSEXP, SEXP adaptSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RObject& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const int& >::type totiter(totiterSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prop(propSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type adapt(adaptSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(nc_mcmc_opt(data, init, totiter, prior, prop, tuning, adapt, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rwmh_adapt
Rcpp::List rwmh_adapt(const arma::mat& theta, const arma::vec& mu, const double& rho, const arma::mat& cov, const arma::vec& ar, const double& alpha, const double& beta, const double& gamma, const double& tar, const int& k, const bool& iter_cols, const int& what);
RcppExport SEXP netcopula_rwmh_adapt(SEXP thetaSEXP, SEXP muSEXP, SEXP rhoSEXP, SEXP covSEXP, SEXP arSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP tarSEXP, SEXP kSEXP, SEXP iter_colsSEXP, SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type cov(covSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tar(tarSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type iter_cols(iter_colsSEXP);
    Rcpp::traits::input_parameter< const int& >::type what(whatSEXP);
    rcpp_result_gen = Rcpp::wrap(rwmh_adapt(theta, mu, rho, cov, ar, alpha, beta, gamma, tar, k, iter_cols, what));
    return rcpp_result_gen;
END_RCPP
}
// nc_mcmc_mh
Rcpp::List nc_mcmc_mh(const Rcpp::RObject& data, const Rcpp::List& init, const int& totiter, const Rcpp::List& prior, const Rcpp::List& prop, const Rcpp::List& tuning, const Rcpp::List& adapt, const bool& verbose);
RcppExport SEXP netcopula_nc_mcmc_mh(SEXP dataSEXP, SEXP initSEXP, SEXP totiterSEXP, SEXP priorSEXP, SEXP propSEXP, SEXP tuningSEXP, SEXP adaptSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RObject& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const int& >::type totiter(totiterSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prop(propSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type adapt(adaptSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(nc_mcmc_mh(data, init, totiter, prior, prop, tuning, adapt, verbose));
    return rcpp_result_gen;
END_RCPP
}
// optim_rcpp
Rcpp::List optim_rcpp(const Rcpp::NumericVector& par, const Rcpp::Function& fn, const Rcpp::List& args, const Rcpp::List& options, const bool& hessian);
RcppExport SEXP netcopula_optim_rcpp(SEXP parSEXP, SEXP fnSEXP, SEXP argsSEXP, SEXP optionsSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type args(argsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_rcpp(par, fn, args, options, hessian));
    return rcpp_result_gen;
END_RCPP
}
// optimhess_rcpp
Rcpp::NumericMatrix optimhess_rcpp(const Rcpp::NumericVector& par, const Rcpp::Function& fn, const Rcpp::List& args, const Rcpp::List& options);
RcppExport SEXP netcopula_optimhess_rcpp(SEXP parSEXP, SEXP fnSEXP, SEXP argsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type args(argsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimhess_rcpp(par, fn, args, options));
    return rcpp_result_gen;
END_RCPP
}
// laplace_rcpp
Rcpp::List laplace_rcpp(const Rcpp::Function& logpost, const Rcpp::NumericVector& guess, const Rcpp::List& args, const Rcpp::List& options);
RcppExport SEXP netcopula_laplace_rcpp(SEXP logpostSEXP, SEXP guessSEXP, SEXP argsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type logpost(logpostSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type guess(guessSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type args(argsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(laplace_rcpp(logpost, guess, args, options));
    return rcpp_result_gen;
END_RCPP
}
// optim_rcpp_example
Rcpp::List optim_rcpp_example();
RcppExport SEXP netcopula_optim_rcpp_example() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(optim_rcpp_example());
    return rcpp_result_gen;
END_RCPP
}
// optimize_rcpp
double optimize_rcpp(const Rcpp::Function& fn, const double& xmin, const double& xmax, const double& tol, const Rcpp::List& args);
RcppExport SEXP netcopula_optimize_rcpp(SEXP fnSEXP, SEXP xminSEXP, SEXP xmaxSEXP, SEXP tolSEXP, SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double& >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< const double& >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimize_rcpp(fn, xmin, xmax, tol, args));
    return rcpp_result_gen;
END_RCPP
}
// laplace_u_rcpp
Rcpp::List laplace_u_rcpp(const Rcpp::Function& fn, const double& xmin, const double& xmax, const double& tol, const Rcpp::List& args, const Rcpp::List& options);
RcppExport SEXP netcopula_laplace_u_rcpp(SEXP fnSEXP, SEXP xminSEXP, SEXP xmaxSEXP, SEXP tolSEXP, SEXP argsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double& >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< const double& >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type args(argsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(laplace_u_rcpp(fn, xmin, xmax, tol, args, options));
    return rcpp_result_gen;
END_RCPP
}
// mat_block_diag
arma::mat mat_block_diag(const arma::mat& A, const int& n);
RcppExport SEXP netcopula_mat_block_diag(SEXP ASEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_block_diag(A, n));
    return rcpp_result_gen;
END_RCPP
}
// Sigma_block
arma::mat Sigma_block(const arma::mat& Sigma_M, const int& n);
RcppExport SEXP netcopula_Sigma_block(SEXP Sigma_MSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_M(Sigma_MSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Sigma_block(Sigma_M, n));
    return rcpp_result_gen;
END_RCPP
}
// df_nm
Rcpp::NumericMatrix df_nm(const Rcpp::DataFrame& x, const Rcpp::IntegerVector& cols);
RcppExport SEXP netcopula_df_nm(SEXP xSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(df_nm(x, cols));
    return rcpp_result_gen;
END_RCPP
}
// nm_stack
Rcpp::NumericVector nm_stack(const Rcpp::NumericMatrix& x);
RcppExport SEXP netcopula_nm_stack(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(nm_stack(x));
    return rcpp_result_gen;
END_RCPP
}
// nv_unstack
Rcpp::NumericMatrix nv_unstack(const Rcpp::NumericVector& x, const int& nc);
RcppExport SEXP netcopula_nv_unstack(SEXP xSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(nv_unstack(x, nc));
    return rcpp_result_gen;
END_RCPP
}
// nv_omit
Rcpp::NumericVector nv_omit(const Rcpp::NumericVector& x);
RcppExport SEXP netcopula_nv_omit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(nv_omit(x));
    return rcpp_result_gen;
END_RCPP
}
// nv_na_index
arma::uvec nv_na_index(const Rcpp::NumericVector& x, const int& dim, const bool& type);
RcppExport SEXP netcopula_nv_na_index(SEXP xSEXP, SEXP dimSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const bool& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(nv_na_index(x, dim, type));
    return rcpp_result_gen;
END_RCPP
}
// nv_miss_replace
Rcpp::NumericVector nv_miss_replace(const Rcpp::NumericVector& x, const arma::vec& miss, const arma::uvec& miss_i);
RcppExport SEXP netcopula_nv_miss_replace(SEXP xSEXP, SEXP missSEXP, SEXP miss_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type miss(missSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type miss_i(miss_iSEXP);
    rcpp_result_gen = Rcpp::wrap(nv_miss_replace(x, miss, miss_i));
    return rcpp_result_gen;
END_RCPP
}
// split_iv
Rcpp::List split_iv(const Rcpp::IntegerVector& x, const Rcpp::IntegerVector& f);
RcppExport SEXP netcopula_split_iv(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(split_iv(x, f));
    return rcpp_result_gen;
END_RCPP
}
// split_nm
Rcpp::List split_nm(const Rcpp::NumericMatrix& x, const Rcpp::IntegerVector& f);
RcppExport SEXP netcopula_split_nm(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(split_nm(x, f));
    return rcpp_result_gen;
END_RCPP
}
// logit_rcpp
Rcpp::NumericVector logit_rcpp(Rcpp::NumericVector p);
RcppExport SEXP netcopula_logit_rcpp(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(logit_rcpp(p));
    return rcpp_result_gen;
END_RCPP
}
// expit_rcpp
Rcpp::NumericVector expit_rcpp(Rcpp::NumericVector x);
RcppExport SEXP netcopula_expit_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(expit_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// nm_omit
arma::vec nm_omit(const Rcpp::NumericMatrix& x, const int& rownum);
RcppExport SEXP netcopula_nm_omit(SEXP xSEXP, SEXP rownumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type rownum(rownumSEXP);
    rcpp_result_gen = Rcpp::wrap(nm_omit(x, rownum));
    return rcpp_result_gen;
END_RCPP
}
// param_long
Rcpp::NumericMatrix param_long(const Rcpp::NumericMatrix& prm_wide, const Rcpp::IntegerVector& narms, const bool& rowindex);
RcppExport SEXP netcopula_param_long(SEXP prm_wideSEXP, SEXP narmsSEXP, SEXP rowindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type prm_wide(prm_wideSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type narms(narmsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type rowindex(rowindexSEXP);
    rcpp_result_gen = Rcpp::wrap(param_long(prm_wide, narms, rowindex));
    return rcpp_result_gen;
END_RCPP
}
// param_wide
Rcpp::NumericMatrix param_wide(const Rcpp::NumericMatrix& prm_long, const Rcpp::IntegerVector& narms, const Rcpp::IntegerVector& trt, const Rcpp::IntegerVector& baseline);
RcppExport SEXP netcopula_param_wide(SEXP prm_longSEXP, SEXP narmsSEXP, SEXP trtSEXP, SEXP baselineSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type prm_long(prm_longSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type narms(narmsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type trt(trtSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type baseline(baselineSEXP);
    rcpp_result_gen = Rcpp::wrap(param_wide(prm_long, narms, trt, baseline));
    return rcpp_result_gen;
END_RCPP
}
// list_mat
arma::mat list_mat(const Rcpp::List& X);
RcppExport SEXP netcopula_list_mat(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(list_mat(X));
    return rcpp_result_gen;
END_RCPP
}
// diag_tri
arma::mat diag_tri(const arma::mat& A);
RcppExport SEXP netcopula_diag_tri(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(diag_tri(A));
    return rcpp_result_gen;
END_RCPP
}
// cube_to_mat
arma::mat cube_to_mat(const arma::cube& X, const bool& is_d, const int& ref);
RcppExport SEXP netcopula_cube_to_mat(SEXP XSEXP, SEXP is_dSEXP, SEXP refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool& >::type is_d(is_dSEXP);
    Rcpp::traits::input_parameter< const int& >::type ref(refSEXP);
    rcpp_result_gen = Rcpp::wrap(cube_to_mat(X, is_d, ref));
    return rcpp_result_gen;
END_RCPP
}
// mat_to_vec
arma::vec mat_to_vec(const arma::mat& X, const bool& is_d, const int& ref);
RcppExport SEXP netcopula_mat_to_vec(SEXP XSEXP, SEXP is_dSEXP, SEXP refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool& >::type is_d(is_dSEXP);
    Rcpp::traits::input_parameter< const int& >::type ref(refSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_to_vec(X, is_d, ref));
    return rcpp_result_gen;
END_RCPP
}
// vec_to_mat
arma::mat vec_to_mat(const arma::vec& x, const int& nc, const bool& is_d, const int& ref);
RcppExport SEXP netcopula_vec_to_mat(SEXP xSEXP, SEXP ncSEXP, SEXP is_dSEXP, SEXP refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const bool& >::type is_d(is_dSEXP);
    Rcpp::traits::input_parameter< const int& >::type ref(refSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_to_mat(x, nc, is_d, ref));
    return rcpp_result_gen;
END_RCPP
}
// Sigma_M_to_beta
arma::vec Sigma_M_to_beta(const arma::mat& A);
RcppExport SEXP netcopula_Sigma_M_to_beta(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Sigma_M_to_beta(A));
    return rcpp_result_gen;
END_RCPP
}
// beta_to_Sigma_M
arma::mat beta_to_Sigma_M(const arma::vec& beta, const int& M);
RcppExport SEXP netcopula_beta_to_Sigma_M(SEXP betaSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_to_Sigma_M(beta, M));
    return rcpp_result_gen;
END_RCPP
}
// is_symmetric
bool is_symmetric(const arma::mat& A);
RcppExport SEXP netcopula_is_symmetric(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(is_symmetric(A));
    return rcpp_result_gen;
END_RCPP
}
// is_correlation
bool is_correlation(const arma::mat& A);
RcppExport SEXP netcopula_is_correlation(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(is_correlation(A));
    return rcpp_result_gen;
END_RCPP
}
// is_positive_definite
bool is_positive_definite(const arma::mat& A, const int& line);
RcppExport SEXP netcopula_is_positive_definite(SEXP ASEXP, SEXP lineSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const int& >::type line(lineSEXP);
    rcpp_result_gen = Rcpp::wrap(is_positive_definite(A, line));
    return rcpp_result_gen;
END_RCPP
}
// make_positive_definite
arma::mat make_positive_definite(const arma::mat& A);
RcppExport SEXP netcopula_make_positive_definite(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(make_positive_definite(A));
    return rcpp_result_gen;
END_RCPP
}
// is_singular
bool is_singular(const arma::mat& A);
RcppExport SEXP netcopula_is_singular(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(is_singular(A));
    return rcpp_result_gen;
END_RCPP
}
// ols_coef
arma::vec ols_coef(const double& xmin, const double& xmax, const Rcpp::List& args, const bool& delta_par);
RcppExport SEXP netcopula_ols_coef(SEXP xminSEXP, SEXP xmaxSEXP, SEXP argsSEXP, SEXP delta_parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< const double& >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type args(argsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type delta_par(delta_parSEXP);
    rcpp_result_gen = Rcpp::wrap(ols_coef(xmin, xmax, args, delta_par));
    return rcpp_result_gen;
END_RCPP
}
// ols_pred
double ols_pred(const arma::vec& coef, const double& x);
RcppExport SEXP netcopula_ols_pred(SEXP coefSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ols_pred(coef, x));
    return rcpp_result_gen;
END_RCPP
}
// cov2cor_rcpp
arma::mat cov2cor_rcpp(const arma::mat& V);
RcppExport SEXP netcopula_cov2cor_rcpp(SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(cov2cor_rcpp(V));
    return rcpp_result_gen;
END_RCPP
}
